version: "3.8"
# Docker Compose file for Lambda, Trino, Postgres, Minio, and Airflow services
services:
  lambda:
    container_name: lambda
    build: 
      context: ./ 
      dockerfile: ./docker/lambda/Dockerfile
    #command: lambda_function.handler
    env_file:
      - .env/.venv
    ports:
      # - 9000:8080 original
      - 9090:8080
    volumes:
      - ./aws/:/var/task # SHOULD NOT
      - $HOME/.aws/:/root/.aws:ro    
    environment:
      - ENV=dev   
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123   
      - MINIO_ENDPOINT=http://minio:9000  
      - POSTGRES_DB=pyiceberg_catalog
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_SERVER=postgres
    networks:
      - trino-network
  trino:
    container_name: trino
    # 
    image: 'trinodb/trino:latest'
    hostname: trino
    ports:
      - '8080:8080'
    volumes:
      # - <host_directory>:<container_directory>:<access_mode>
      - ./trino/etc:/etc/trino
      - ./lastfm-warehouse:/lastfm-warehouse
    networks:
      - trino-network
  postgres:
    container_name: postgres
    image: postgres:14.1-alpine
    #restart: always
    environment:
      - POSTGRES_DB=postgres_catalog
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ROOT_PASSWORD=root
    ports:
      - '5432:5432'
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      # - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql (initialization script)
      # - postgres-db-volume:/var/lib/postgresql/data (airflow)

    #restart: always
    #healthcheck:
    #  test: ["CMD", "pg_isready", "-U", "airflow"]
    #  interval: 10s
    #  retries: 5
    #  start_period: 5s

    networks:
      - trino-network
  minio:
    container_name: minio
    image: minio/minio
    ports:
    - 9000:9000 # CLI
    - 9001:9001 # Web 
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      #- /path/to/data:/data
      - ./:/buckets
    command: server /buckets --console-address ":9001"
    networks:
      - trino-network
#  redis:
#    container_name: redis
#    image: bitnami/redis:latest
#    environment:
#      - ALLOW_EMPTY_PASSWORD=yes
#    volumes:
#      - ./redis:/bitnami
#    networks:
#      - trino-network         
  airflow-scheduler:
    container_name: airflow-scheduler
    build: 
      context: ./ 
      dockerfile: ./docker/airflow/Dockerfile
      secrets:
      - airflow_fernet_key
      - airflow_secret_key  
    environment:
      - PIP_INSTALL="apache-airflow-providers-snowflake"
      - AIRFLOW_COMPONENT_TYPE=scheduler
      - AIRFLOW_FERNET_KEY=/run/secrets/airflow_fernet_key
      - AIRFLOW_SECRET_KEY=/run/secrets/airflow_secret_key
      - AIRFLOW_EXECUTOR=LocalExecutor
      - AIRFLOW_DATABASE_HOST=postgres
      - AIRFLOW_DATABASE_NAME=airflow
      - AIRFLOW_DATABASE_USERNAME=postgres
      - AIRFLOW_DATABASE_PASSWORD=postgres
      - AIRFLOW_LOAD_EXAMPLES=no
    volumes:
      #- /path/to/data:/data
      - ./airflow/dags:/opt/bitnami/airflow/dags
      - $HOME/.aws/:/opt/bitnami/.aws:ro
    networks:
      - trino-network         
  airflow:
    container_name: airflow
    build: 
      context: ./ 
      dockerfile: ./docker/airflow/Dockerfile
    secrets:
      - airflow_fernet_key
      - airflow_secret_key
    environment:
      - PIP_INSTALL="apache-airflow-providers-snowflake"
      - AIRFLOW__WEBSERVER__SHOW_TRIGGER_FORM_IF_NO_PARAMS=true
      - AIRFLOW_FERNET_KEY=/run/secrets/airflow_fernet_key
      - AIRFLOW_SECRET_KEY=/run/secrets/airflow_secret_key
      - AIRFLOW_EXECUTOR=LocalExecutor
      - AIRFLOW_DATABASE_NAME=airflow
      - AIRFLOW_DATABASE_HOST=postgres
      - AIRFLOW_DATABASE_USERNAME=postgres
      - AIRFLOW_DATABASE_PASSWORD=postgres
      - AIRFLOW_PASSWORD=airflow
      - AIRFLOW_USERNAME=airflow
      - AIRFLOW_EMAIL=user@example.com
      - AIRFLOW_WEBSERVER_HOST=localhost
      - AIRFLOW_WEBSERVER_PORT_NUMBER=8888
      - AIRFLOW_LOAD_EXAMPLES=no
    volumes:
      #- /path/to/data:/data
      - ./airflow/dags:/opt/bitnami/airflow/dags
      - ./airflow/logs:/opt/bitnami/airflow/logs
      - $HOME/.aws/:/opt/bitnami/.aws:ro
    ports:
      - 8888:8888
    networks:
      - trino-network  

  streamlit:
    build: 
      context: ./ 
      dockerfile: ./docker/streamlit/Dockerfile
    command: streamlit run app/main.py --server.port 8501
    volumes:
      - ./streamlit/:/usr/src/app
    ports:
      - 8501:8501
 #   image: yourstreamlitapp:latest

volumes:
  #postgres-db-volume:
  app:
    driver: local

networks:
  trino-network:
    driver: bridge

secrets:
   airflow_fernet_key:
     file: ./airflow/secrets/airflow_fernet_key.txt
   airflow_secret_key:
     file: ./airflow/secrets/airflow_secret_key.txt

